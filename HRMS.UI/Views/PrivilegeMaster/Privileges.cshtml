@inject IConfiguration Configuration

@{
	ViewData["Title"] = "Privilege Master";
	Layout = "~/Views/Shared/_mainLayout.cshtml";
	string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
	ViewBag.PageKey = "PrivilegeMasterPage";
}


<style>
	.scrollable-container {
		height: 150px; /* Set a fixed height */
		width: 200px; /* Set a fixed width */
		overflow-y: auto; /* Enable vertical scrolling */
		border: 1px solid #ccc; /* Optional: Add a border for visual clarity */
		padding: 5px; /* Optional: Add padding for spacing */
	}

	.select-all {
		margin-bottom: 5px;
		padding: 3px;
		border-bottom: 1px solid #eee; /* Optional: Add a subtle border for separation */
	}

	.branch-item, .department-item, .vertical-item {
		margin: 3px 0;
		padding: 3px;
		border: 1px solid #eee;
		border-radius: 5px; /* Optional: Round the corners */
		word-wrap: break-word;
	}

	.branch-checkbox, .department-checkbox, .vertical-checkbox, .select-all-checkbox {
		margin-right: 10px;
	}

	
</style>
<style>
	.scrollable-table {
		max-height: 400px; /* or however tall you want it */
		overflow-y: auto;
		position: relative;
	}

	
	.scrollable-table thead th {
			position: sticky;
			top: 0;
			background-color: #f8f9fa; /* match your theme */
			z-index: 2;
		border-bottom: 1px solid #ccc;
		box-shadow: inset 0 -1px 0 #ccc;
	}

	table {
		width: 100%;
		border-collapse: collapse;
	}

	th, td {
		border: 1px solid #ddd;
		padding: 8px;
		text-align: left;
	}

	th {
		background-color: #f2f2f2;
	}

	.panel-row {
		background-color: #cee3f6;
		font-weight: bold;
	}

	.toggle-icon {
		cursor: pointer;
		margin-right: 5px;
		font-size: 12px;
		color: black;
	}

	.level-1 td:first-child {
		padding-left: 10px;
		font-weight: bold;
	}

	.level-2 td:first-child {
		padding-left: 25px;
	}

	.level-3 td:first-child {
		padding-left: 40px;
	}

	.action-hidden {
		display: none;
	}

	.scrollable-table {
		max-height: 250px;
		overflow-y: auto;
		overflow-x: hidden;
		display: block;
	}

	
	.merged-row td {
		background-color: #eef4ff;
		font-weight: bold;
	}


</style>
<div class="card">
	<div class="card-header bg-transparent ml-0 py-0">
		<div class="row m-2">
			<div class="col-6 ">
				<h6 class="pt-2 mb-0">
					Privilege Master
				</h6>
			</div>

			<div class="col-6 d-flex justify-content-end align-items-center">
				<div class="font-22 pl-2" style="color:#32393f; cursor:pointer;">
					@* 					<i class="fadeIn animated bx bx-refresh" id="refreshData" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Refresh Data"></i>
 *@				
                    <button id="addPrivilegeMaster"
							type="button"
							class="btn mr-1 rounded-1 "
							style="background-color:#2395c6; color:white;">
						Add
					</button>
				</div>
			</div>
		</div>
	</div>
	<div class="card-body ">

		<div class="row">
			<div class="col-md-12">
				<div class="form-group">
					<div class="rowCount" id="rowCountPrivilegeMaster"></div>
					<div id="gridContainerPrivilegeMaster">
						<div class="d-flex justify-content-center align-items-center" style="height: 10vh;">
							<div class="spinner-border text-primary" role="status">
								<span class="visually-hidden">Loading...</span>
							</div>
						</div>
					</div>
					<div id="spnNoRecord" style="display:none;">No Record Found!</div>

				</div>
			</div>
		</div>
	</div>

</div>


<div class="modal fade" id="addPrivilegeMasterModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h6 class="modal-title btn-heading-title" id="exampleModalLabel">
					<span class="formType">Add</span> Privileges
				</h6>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font" style="font-size:12px;">


				<div class="row">

					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<input type="text" class="form-control floating-input" id="txtPrivilegeName" placeholder=" ">
							<label class="floating-label" for="txtPrivilegeName">Privilege Name*</label>
							<span id="spnPrivilegeName" style="color:red; display:none;">Please Enter Privilege Name</span>

						</div>
					</div>

					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<select class="form-select floating-input" id="ddlPagePanel">
								<option value="">Select</option>
								<!-- Add your options here -->
							</select>
							<label class="floating-label" for="ddlPagePanel">Page Panel </label>
						</div>
					</div>

				</div>

				<!-- New Fields -->
				<div class="row">
					<div class="col-md-3 mt-3">
						<div id="branchesContainer" class="scrollable-container">
							<div class="select-all">
								<input type="checkbox" id="selectAllBranch" class="select-all-checkbox">
								<label for="selectAllBranch"><strong>Branch</strong></label>
							</div>
						</div>

					</div>
					<div class="col-md-3 mt-3">
						<div id="departmentContainer" class="scrollable-container">
							<div class="select-all">
								<input type="checkbox" id="selectAllDepartment" class="select-all-checkbox">
								<label for="selectAllDepartment"><strong>Department</strong></label>
							</div>

						</div>

					</div>
					<div class="col-md-3 mt-3">
						<div id="verticalContainer" class="scrollable-container">
							<div class="select-all">
								<input type="checkbox" id="selectAllVertical" class="select-all-checkbox">
								<label for="selectAllVertical"><strong>Vertical</strong></label>
							</div>
						</div>

					</div>


				</div>



				<div class="row">
					<div class="col-md-12 mt-3">
						<div class="scrollable-table">
							<table id="dynamicTable">
								<thead>
									<tr>
										<th>Name</th>
										<th>Deleted</th>
										<th>View</th>
										<th>Update</th>
										<th>Save</th>
									</tr>
								</thead>
								<tbody></tbody>
							</table>
						</div>
					</div>


				</div>


			</div>

			<div class="modal-footer btn-heading-title">
				<button type="button" class="btn btn-primary" id="btnAddPrivilegeMaster" style="background-color:#2395c6; color:white;">Save</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>

		<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

		<script>
			const savedCompany = localStorage.getItem('selectedCompany');
			var companyDetails = JSON.parse(savedCompany);
			const CompanyId=companyDetails.companyId;
		console.log("CompanyId ",CompanyId)
			async function GetPageData(){

				if (!CompanyId) {
						round_error_noti("Please select company");
						return;
					}

						var pagePanelId = $('#ddlPagePanel').val();
						if (!pagePanelId) {
							round_error_noti("Please select page panel");
							return;
						}

					var payloadData = {
					pagePanelId: pagePanelId,
						companyId: CompanyId,
				       PrivilegeMasterId:0  //15//18
					};

					$.ajax({
			           url: '@baseUrl/PrivilegeMasterAPI/GetAllPageHierarchyByPrivilegeMasterId', // Replace with actual API URL
						method: 'POST',
						contentType: 'application/json',
						data: JSON.stringify(payloadData),
						success: function(response) {
							console.log("PageData",response);
							if (response.isSuccess) {
								//console.log(response.data);
						        BindPageData(response.data);

							} else {
								round_error_noti(response.responseMessage);
							}
						},
						error: function(xhr, status, error) {
							console.error("API Error: ", error);
						}
					});

			}



			async function bindPagePanel(){

			   $.ajax({
					url: '@baseUrl/PagePanelAPI/GetAllPagePanels',
					method: 'GET',
					success: function(data) {
						if(data.isSuccess){
							var dropdowns = $('#ddlPagePanel');
							dropdowns.empty();
					        dropdowns.append($('<option >', {
								value:'0',
								text: 'Admin/ESS'
							}));
							$.each(data.data, function(index, panel) {
									dropdowns.append($('<option >', {
									value: panel.pagePanelId,
									text: panel.pagePanelName
								}));
							});


						}
					},
					error: function(error) {
						console.error('Error fetching page penel data:', error);
					}
				});

			}


			$("#addPrivilegeMaster").click( async () => {
							await GetPageData();
						  $("#addPrivilegeMasterModal").modal('show');
			})

			function bindBranch() {
				$.ajax({
					url: '@baseUrl/BranchAPI/GetAllBranch',
					method: 'GET',
					success: function(data) {
						if (data.isSuccess) {
							const branchesContainer = $('#branchesContainer');
							branchesContainer.find('.branch-item').remove(); // Clear existing branch items

							// Iterate over each branch in the data
							data.data.forEach(branch => {
								// Create a div for each branch
								const branchDiv = $('<div>', {
									class: 'branch-item',
									'data-branch-id': branch.branchId
								});

								// Create a checkbox for each branch
								const checkbox = $('<input>', {
									type: 'checkbox',
									id: `branch-${branch.branchId}`,
									class: 'branch-checkbox'
								});

								// Create a label for the checkbox
								const label = $('<label>', {
									for: `branch-${branch.branchId}`,
									text: branch.branchName
								});

								// Append the checkbox and label to the branch div
								branchDiv.append(checkbox, label);

								// Append the branch div to the container
								branchesContainer.append(branchDiv);
							});

							// Add event listener for the "Select All" checkbox
							$('#selectAllBranch').on('change', function() {
								const isChecked = $(this).is(':checked');
								$('.branch-checkbox').prop('checked', isChecked);
							});
						}
					},
					error: function(error) {
						console.error('Error fetching branch data:', error);
					}
				});
			}



			function bindDepartment() {
				$.ajax({
					url: '@baseUrl/DepartmentAPI/GetAllDepartment',
					method: 'GET',
					success: function(data) {
						console.log('Data received:', data); // Log the data to the console

						if (data.isSuccess && data.data) {
							const departmentsContainer = $('#departmentContainer'); // Ensure this ID matches your HTML

							// Check if the container exists
							if (!departmentsContainer.length) {
								console.error('Departments container not found');
								return;
							}

							departmentsContainer.find('.department-item').remove(); // Clear existing department items

							// Iterate over each department in the data
							data.data.forEach(department => {
								// Create a div for each department
								const departmentDiv = $('<div>', {
									class: 'department-item',
									'data-department-id': department.departmentId
								});

								// Create a checkbox for each department
								const checkbox = $('<input>', {
									type: 'checkbox',
									id: `department-${department.departmentId}`,
									class: 'department-checkbox'
								});

								// Create a label for the checkbox
								const label = $('<label>', {
									for: `department-${department.departmentId}`,
									text: department.departmentName
								});

								// Append the checkbox and label to the department div
								departmentDiv.append(checkbox, label);

								// Append the department div to the container
								departmentsContainer.append(departmentDiv);
							});

							// Add event listener for the "Select All" checkbox
							$('#selectAllDepartment').on('change', function() {
								const isChecked = $(this).is(':checked');
								$('.department-checkbox').prop('checked', isChecked);
							});
						} else {
							console.error('Data fetch was not successful or data is missing');
						}
					},
					error: function(error) {
						console.error('Error fetching department data:', error);
					}
				});
			}

		function bindVertical() {
			$.ajax({
				url: '@baseUrl/VerticalAPI/GetAllVertical', // Replace with your actual API endpoint
				method: 'GET',
				success: function(data) {
					console.log('Data received:', data); // Log the data to the console

					if (data.isSuccess && data.data) {
						const verticalContainer = $('#verticalContainer'); // Ensure this ID matches your HTML

						// Check if the container exists
						if (!verticalContainer.length) {
							console.error('Vertical container not found');
							return;
						}

						verticalContainer.find('.vertical-item').remove(); // Clear existing vertical items

						// Iterate over each vertical in the data
						data.data.forEach(vertical => {
							// Create a div for each vertical
							const verticalDiv = $('<div>', {
								class: 'vertical-item',
								'data-vertical-id': vertical.verticalId
							});

							// Create a checkbox for each vertical
							const checkbox = $('<input>', {
								type: 'checkbox',
								id: `vertical-${vertical.verticalId}`,
								class: 'vertical-checkbox'
							});

							// Create a label for the checkbox
							const label = $('<label>', {
								for: `vertical-${vertical.verticalId}`,
								text: vertical.verticalName
							});

							// Append the checkbox and label to the vertical div
							verticalDiv.append(checkbox, label);

							// Append the vertical div to the container
							verticalContainer.append(verticalDiv);
						});

						// Add event listener for the "Select All" checkbox
						$('#selectAllVertical').on('change', function() {
							const isChecked = $(this).is(':checked');
							$('.vertical-checkbox').prop('checked', isChecked);
						});
					} else {
						console.error('Data fetch was not successful or data is missing');
					}
				},
				error: function(error) {
					console.error('Error fetching vertical data:', error);
				}
			});
		}


			// Call the function to bind departments
			$(document).ready( async function() {
				// 2️⃣ Then load panel, branch, department in parallel
				await Promise.all([
				  bindPagePanel(),
				  bindBranch(),
				  bindDepartment()
				]);

				// 3️⃣ Finally, call GetPageData
				$('#companyDropdown').change(function() {
						GetPageData();
				});

				// Bind change event for page panel dropdown
				$('#ddlPagePanel').change(function() {
						GetPageData();
				});
			});




		</script>

		<script>
		function BindPageData(PageData) {
		const tbody = document.querySelector('#dynamicTable tbody');
		tbody.innerHTML = '';

		function renderRow(item, level, hasChildren) {
			const tr = document.createElement('tr');
			tr.classList.add(`level-${level}`);
			tr.dataset.pageMasterId = item.pageMasterId || '';
			tr.dataset.privilegeDetailsId = item.privilegeDetailsId || 0;

			// Page name + node checkbox + toggle
			const nameTd = document.createElement('td');
			const toggle = hasChildren ? `<span class="toggle-icon">▶</span>` : '';
			nameTd.innerHTML = `${toggle}<input type="checkbox" class="node-check" /> <label>${item.pageName}</label>`;
			tr.appendChild(nameTd);

			// Append all action checkboxes, hide if parent
			["delete", "view", "update", "save"].forEach(cls => {
				const td = document.createElement('td');
				td.innerHTML = `<input type="checkbox" class="${cls}" ${hasChildren ? 'style="display:none"' : ''} />`;
				tr.appendChild(td);
			});

			if (level > 1) tr.style.display = "none";
			tbody.appendChild(tr);
			return tr;
		}

		function renderData(list, level = 1) {
			list.forEach(item => {
				const hasChildren = (item.subPages && item.subPages.length > 0) || (item.subSubPages && item.subSubPages.length > 0);
				renderRow(item, level, hasChildren);
				const children = item.subPages || item.subSubPages || [];
				if (hasChildren) renderData(children, level + 1);
			});
		}

		PageData.forEach(panel => {
			const tr = document.createElement('tr');
			tr.classList.add('panel-row');
			const td = document.createElement('td');
			td.colSpan = 5;
			td.innerHTML = `<strong>${panel.pagePanelName}</strong>`;
			tr.appendChild(td);
			tbody.appendChild(tr);
			renderData(panel.pages, 1);
		});

		document.addEventListener('click', e => {
			if (e.target.classList.contains('toggle-icon')) {
				const parentRow = e.target.closest('tr');
				const levelClass = [...parentRow.classList].find(c => c.startsWith('level-'));
				const level = levelClass ? parseInt(levelClass.split('-')[1]) : 1;
				let expanded = false;
				let row = parentRow.nextElementSibling;
				while (row && !row.classList.contains(`level-${level}`)) {
					const nextLevelClass = [...row.classList].find(c => c.startsWith('level-'));
					const nextLevel = nextLevelClass ? parseInt(nextLevelClass.split('-')[1]) : 1;
					if (nextLevel <= level) break;
					if (nextLevel === level + 1) {
						row.style.display = row.style.display === 'none' ? '' : 'none';
						expanded = row.style.display === '';
					}
					row = row.nextElementSibling;
				}
				e.target.textContent = expanded ? '▼' : '▶';
			}
		});

			document.addEventListener('change', function(e) {
		const row = e.target.closest('tr');
		if (!row) return; // Prevent null error if not inside a <tr>

		const levelClass = [...row.classList].find(c => c.startsWith('level-'));
		const level = levelClass ? parseInt(levelClass.split('-')[1]) : 1;

		// Node check toggled
		if (e.target.classList.contains('node-check')) {
			const checked = e.target.checked;

			// Check/uncheck all action boxes in this row
			["delete", "view", "update", "save"].forEach(cls => {
				const cb = row.querySelector(`input.${cls}`);
				if (cb) cb.checked = checked;
			});

			// Propagate to children
			let nextRow = row.nextElementSibling;
			while (nextRow) {
				const nextLevelClass = [...nextRow.classList].find(c => c.startsWith('level-'));
				const nextLevel = nextLevelClass ? parseInt(nextLevelClass.split('-')[1]) : 1;
				if (nextLevel <= level) break;

				const nodeCb = nextRow.querySelector('input.node-check');
				if (nodeCb) nodeCb.checked = checked;

				["delete", "view", "update", "save"].forEach(cls => {
					const cb = nextRow.querySelector(`input.${cls}`);
					if (cb) cb.checked = checked;
				});

				nextRow = nextRow.nextElementSibling;
			}
		}

		// ✅ Propagate upward for any checkbox checked
		if (e.target.checked) {
			let parentRow = findParentRow(row);
			while (parentRow) {
				const nodeCb = parentRow.querySelector('input.node-check');
				if (nodeCb) nodeCb.checked = true;

				["delete", "view", "update", "save"].forEach(cls => {
					const cb = parentRow.querySelector(`input.${cls}`);
					if (cb) cb.checked = true;
				});

				parentRow = findParentRow(parentRow);
			}
		}

		// 🔄 Update parent action checkboxes based on children
		if (["delete", "view", "update", "save"].some(cls => e.target.classList.contains(cls))) {
			updateParentActions(row);
		}
	});

		function updateParentActions(row) {
			const levelClass = [...row.classList].find(c => c.startsWith('level-'));
			const level = levelClass ? parseInt(levelClass.split('-')[1]) : 1;
			let parentRow = findParentRow(row);

			while (parentRow) {
				["delete", "view", "update", "save"].forEach(cls => {
					const parentCb = parentRow.querySelector(`input.${cls}`);
					if (!parentCb) return;

					// Check if any children have this action checked
					let hasChecked = false;
					let nextRow = parentRow.nextElementSibling;
					while (nextRow) {
						const nextLevelClass = [...nextRow.classList].find(c => c.startsWith('level-'));
						const nextLevel = nextLevelClass ? parseInt(nextLevelClass.split('-')[1]) : 1;
						if (nextLevel <= level) break;

						const cb = nextRow.querySelector(`input.${cls}`);
						if (cb && cb.checked) {
							hasChecked = true;
							break;
						}
						nextRow = nextRow.nextElementSibling;
					}

					if (hasChecked) parentCb.checked = true;
				});

				row = parentRow;
				parentRow = findParentRow(parentRow);
			}
		}

		function findParentRow(row) {
			const currentLevelClass = [...row.classList].find(c => c.startsWith('level-'));
			const currentLevel = currentLevelClass ? parseInt(currentLevelClass.split('-')[1]) : 1;
			let prevRow = row.previousElementSibling;

			while (prevRow) {
				const prevLevelClass = [...prevRow.classList].find(c => c.startsWith('level-'));
				const prevLevel = prevLevelClass ? parseInt(prevLevelClass.split('-')[1]) : null;
				if (prevLevel !== null && prevLevel < currentLevel) return prevRow;
				prevRow = prevRow.previousElementSibling;
			}
			return null;
		}
	}


	function collectPageData() {
		const rows = document.querySelectorAll('#dynamicTable tbody tr');
		const result = [];

		rows.forEach(row => {
			const checkbox = row.querySelector('.node-check');
			if (checkbox && checkbox.checked) {
				result.push({
					CompanyId: CompanyId,
					PrivilegeMasterId: PrivilegeMasterId,
					PageId: parseInt(row.dataset.pageMasterId || null),
					privilegeDetailsId: parseInt(row.dataset.privilegeDetailsId || 0),
					is_Delete: row.querySelector('.delete')?.checked || false,
					is_Edit: row.querySelector('.update')?.checked || false,
					is_View: row.querySelector('.view')?.checked || false,
					is_Save: row.querySelector('.save')?.checked || false,
					CreatedBy: row.dataset.privilegeDetailsId == null ? null : null,
					UpdatedBy: row.dataset.privilegeDetailsId == null ? null : null
				});
			}
		});

		return result;
	}


		</script>
		<script>

		 let PrivilegeMasterId=0;
			$(document).ready(async function(){
				await PrivilegeMasterDataTable();
			})


		 function PrivilegeMasterDataTable() {
			 debugger
					if (!CompanyId) {
						round_error_noti("Please select company");
						return;
					}
			$.ajax({
				type: "GET",
					url: '@baseUrl/PrivilegeMasterAPI/GetAllPrivilegeMasterByCompanyId/'+CompanyId,
				success: function(data) {
					if (data.isSuccess) {
						console.log("dataTable",data);
						debugger
						$("#spnNoRecord").hide();
							$("#gridContainerPrivilegeMaster").show();
							$("#gridContainerPrivilegeMaster").dxDataGrid({
							dataSource: data.data,
							rowHeight: 40,
							width: '100%',
							columns: [
								
								{
									dataField: 'privilegeName',
									caption: 'Privilege Name',
									alignment: 'left',
									width: 200
								},
								
								
								{
									dataField: 'branchNames',
									caption: 'Branch Names',
									alignment: 'left',
									width: 300
								},
								{
									dataField: 'departmentNames',
									caption: 'Department Names',
									alignment: 'left',
									width: 300
								},
								{
									dataField: 'pagePanelName',
									caption: 'Privilege Type',
									alignment: 'left',
									width: 200
								},
							
							{
							dataField: '',
							caption: '',
							alignment: 'center',
							width: '50px',
							type: 'buttons',
							fixed: true,
							fixedPosition: 'right',
							cellTemplate: function(container, options) {
								var buttonElement = $('<div class="d-flex order-actions">' +
									'<a href="javascript:;" class="edit-action" title="Edit Employee">' +
									'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
									'<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
									'</svg>' +
									'</a>' +
									'</div>')
									.on('dxclick', function() {
									editPrivilegeMaster(options.data);
									}).appendTo(container);
							}
							},
							{
							dataField: '',
							caption: '',
							alignment: 'center',
							width: '50px',
							type: 'buttons',
							fixed: true,
							fixedPosition: 'right',
							cellTemplate: function(container, options) {
											var buttonElement = $('<div class="d-flex order-actions">' +
												'<a href="javascript:;" class="delete-action" title="Delete Employee">' +
												'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
												'<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
												'</svg>' +
												'</a>' +
												'</div>')
												.on('dxclick', function() {
												deletePrivilegeMaster(options.data);
												}).appendTo(container);
							   }
							}

							],
							columnsAutoWidth: false,
							wordWrapEnabled: false,
							showBorders: true,
							rowAlternationEnabled: false,
							showBorders: true,
							grouping: { autoExpandAll: true },
							paging: { pageSize: 10 },
							pager: { showPageSizeSelector: true, allowedPageSizes: [10, 25, 50, 100] },
							headerFilter: { visible: true },
							filterRow: { visible: true, applyFilter: "auto" },
							allowColumnResizing: true,
							groupPanel: { visible: true },
							searchPanel: { visible: true, width: 240, placeholder: "Search..." },
							columnFixing: {
								enabled: true
							},
							scrolling: {
								mode: "standard",
								useNative: false,
								scrollByContent: true,
								scrollByThumb: true,
							},
							onContentReady: function(e) {
								$('#rowCountPrivilegeMaster').html('Total Records: ' + e.component.totalCount());
							}
						});
					} else {
							$("#gridContainerPrivilegeMaster").hide();
						$("#spnNoRecord").show();
					}
				},
				error: function(xhr, status, error) {
					console.error("AJAX Error: " + status + " - " + error);
				}
			});
		}


			 $("#btnAddPrivilegeMaster").click(  () => {
					  savePrivilageData();

			  })
			  function savePrivilageData() {

					var branches = getSelectedBranches();
					  var departments = getSelectedDepartments();
					   var privilegeName = $('#txtPrivilegeName').val();
					   var pagePanel = $('#ddlPagePanel').val();
					   var vertical=getSelectedVerticals();
					  var  privilegeMaster={
							PrivilegeMasterId:PrivilegeMasterId,
							PrivilegeName:privilegeName,
							CompanyId:CompanyId,
							BranchId_Multi:branches,
						DepartmentId_Multi:departments,
						VerticalId_Multi:vertical,
						PrivilegeType:pagePanel,
						CreatedBy:PrivilegeMasterId==0?null:null,
		                    UpdatedBy:PrivilegeMasterId==0?null:null
					  };
					  var payload = {
						 PrivilegeMaster:privilegeMaster,
						PrivilegeDetails:collectPageData()
						
					  };
						console.log("payload",payload);
						debugger
						return;
				  $.ajax({
					  url: '@baseUrl/PrivilegeMasterAPI/CreatePrivilegeMaster', // Replace with your actual API URL
					  method: 'POST',
					  contentType: 'application/json',
					  data: JSON.stringify(payload),
					  success: function(response) {
						  if (response.isSuccess) {
							  round_success_noti(response.responseMessage);
							//$("#addEmployeeModal").modal('hide');
							} else {
								round_error_noti(response.responseMessage);
							}
					  },
					  error: function(xhr, status, error) {
						  console.error("API Error: ", error);
						  alert('Error saving data.');
					  }
				  });
			  }

	// function collectPageData() {
	// 		  const rows = document.querySelectorAll('#dynamicTable tbody tr');
	// 		  const result = [];

	// 		  rows.forEach(row => {
	// 			if (row.querySelector('.node-check')) {
	// 			  result.push({
	// 				CompanyId:$('#companyDropdown').val(),
	// 				PrivilegeMasterId:PrivilegeMasterId,
	// 				PageId: parseInt(row.dataset.pageMasterId || null),
	// 				privilegeDetailsId: parseInt(row.dataset.privilegeDetailsId || 0),
	// 				is_Delete: row.querySelector('.delete')?.checked || false,
	// 				is_Edit: row.querySelector('.update')?.checked || false,
	// 				is_View: row.querySelector('.view')?.checked || false,
	// 				is_Save: row.querySelector('.save')?.checked || false,
	// 				CreatedBy:row.dataset.privilegeDetailsIdnull==0?null:null,
	// 				UpdatedBy:row.dataset.privilegeDetailsIdnull==0?null:null
	// 			  });
	// 			}
	// 		  });

	// 		  return result;
	// 		}

	    function getSelectedBranches() {
			var selectedBranches = [];
			$('.branch-checkbox:checked').each(function() {
				selectedBranches.push($(this).closest('.branch-item').data('branch-id'));
			});
			return selectedBranches.length > 0 ? selectedBranches.join('#') : null;
		}

		function getSelectedDepartments() {
			var selectedDepartments = [];
			$('.department-checkbox:checked').each(function() {
				selectedDepartments.push($(this).closest('.department-item').data('department-id'));
			});
			return selectedDepartments.length > 0 ? selectedDepartments.join('#') : null;
		}
		function getSelectedVerticals() {
			var selectedVerticals = [];
			$('.vertical-checkbox:checked').each(function() {
				selectedVerticals.push($(this).closest('.vertical-item').data('vertical-id'));
			});
			return selectedVerticals.length > 0 ? selectedVerticals.join('#') : null;
		}



function editPrivilegeMaster(data) {
	console.log("Upadte",data);
	debugger;
			PrivilegeMasterId=data.privilegeMasterId
		// Set text input value
		$('#txtPrivilegeName').val(data.privilegeName);

		// Set dropdown (select) value
			$('#ddlPagePanel').val(data.privilegeType);

		// Handle multi-select checkboxes (branch, department, vertical)
		setMultiCheckbox('branchesContainer', data.branchId_Multi);
		setMultiCheckbox('departmentContainer', data.departmentId_Multi);
		setMultiCheckbox('verticalContainer', data.verticalId_Multi);

		// Update modal header (optional)
		$('.formType').text('Edit');

		// Show the modal
			GetPageData();
		  $("#addPrivilegeMasterModal").modal('show');
	}

	// Utility to check relevant boxes
	function setMultiCheckbox(containerId, csvIds) {
		if (!csvIds) return;

		const ids = csvIds.split('#').length > 1 ? csvIds.split('#') : csvIds.split(',');
		$(`#${containerId} input[type="checkbox"]`).each(function () {
			const checkboxVal = $(this).val();
			$(this).prop('checked', ids.includes(checkboxVal));
		});
	}


</script>


@{
	ViewData["Title"] = "Privilege Master";
	Layout = "~/Views/Shared/_mainLayout.cshtml";
	string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
}

<style>
	.scrollable-container {
		height: 150px; /* Set a fixed height */
		width: 200px; /* Set a fixed width */
		overflow-y: auto; /* Enable vertical scrolling */
		border: 1px solid #ccc; /* Optional: Add a border for visual clarity */
		padding: 5px; /* Optional: Add padding for spacing */
	}

	.select-all {
		margin-bottom: 5px;
		padding: 3px;
		border-bottom: 1px solid #eee; /* Optional: Add a subtle border for separation */
	}

	.branch-item, .department-item, .vertical-item {
		margin: 3px 0;
		padding: 3px;
		border: 1px solid #eee;
		border-radius: 5px; /* Optional: Round the corners */
		word-wrap: break-word;
	}

	.branch-checkbox, .department-checkbox, .vertical-checkbox, .select-all-checkbox {
		margin-right: 10px;
	}

</style>
<style>
	table {
		width: 100%;
		border-collapse: collapse;
	}

	th, td {
		border: 1px solid #ddd;
		padding: 8px;
		text-align: left;
	}

	th {
		background-color: #f2f2f2;
	}

	.panel-row {
		background-color: #cee3f6;
		font-weight: bold;
	}

	.toggle-icon {
		cursor: pointer;
		margin-right: 5px;
		font-size: 12px;
		color: black;
	}

	.level-1 td:first-child {
		padding-left: 10px;
		font-weight: bold;
	}

	.level-2 td:first-child {
		padding-left: 25px;
	}

	.level-3 td:first-child {
		padding-left: 40px;
	}

	.action-hidden {
		display: none;
	}

	.scrollable-table {
		max-height: 250px;
		overflow-y: auto;
		overflow-x: hidden;
		display: block;
	}

</style>
<div class="card">
	<div class="card-header bg-transparent ml-0 py-0">
		<div class="row m-2">
			<div class="col-6 ">
				<h6 class="pt-2 mb-0">
					Privilege Master
				</h6>
			</div>

			<div class="col-6 d-flex justify-content-end align-items-center">
				<div class="font-22 pl-2" style="color:#32393f; cursor:pointer;">
					@* 					<i class="fadeIn animated bx bx-refresh" id="refreshData" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Refresh Data"></i>
 *@				
                    <button id="addPrivilegeMaster"
							type="button"
							class="btn mr-1 rounded-1 "
							style="background-color:#2395c6; color:white;">
						Add
					</button>
				</div>
			</div>
		</div>
	</div>
	<div class="card-body ">

		<div class="row">
			<div class="col-md-12">
				<div class="form-group">
					<div class="rowCount" id="rowCountPrivilegeMaster"></div>
					<div id="gridContainerPrivilegeMaster">
						<div class="d-flex justify-content-center align-items-center" style="height: 10vh;">
							<div class="spinner-border text-primary" role="status">
								<span class="visually-hidden">Loading...</span>
							</div>
						</div>
					</div>

				</div>
			</div>
		</div>
	</div>

</div>


<div class="modal fade" id="addPrivilegeMasterModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h6 class="modal-title btn-heading-title" id="exampleModalLabel">
					<span class="formType">Add</span> Privileges
				</h6>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font" style="font-size:12px;">


				<div class="row">

					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<input type="text" class="form-control floating-input" id="txtPrivilegeName" placeholder=" ">
							<label class="floating-label" for="txtPrivilegeName">Privilege Name*</label>
							<span id="spnPrivilegeName" style="color:red; display:none;">Please Enter Privilege Name</span>

						</div>
					</div>

					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<select class="form-select floating-input" id="ddlPagePanel">
								<option value="">Select</option>
								<!-- Add your options here -->
							</select>
							<label class="floating-label" for="ddlPagePanel">Page Panel </label>
						</div>
					</div>

				</div>

				<!-- New Fields -->
				<div class="row">
					<div class="col-md-3 mt-3">
						<div id="branchesContainer" class="scrollable-container">
							<div class="select-all">
								<input type="checkbox" id="selectAllBranch" class="select-all-checkbox">
								<label for="selectAllBranch"><strong>Branch</strong></label>
							</div>
						</div>

					</div>
					<div class="col-md-3 mt-3">
						<div id="departmentContainer" class="scrollable-container">
							<div class="select-all">
								<input type="checkbox" id="selectAllDepartment" class="select-all-checkbox">
								<label for="selectAllDepartment"><strong>Department</strong></label>
							</div>

						</div>

					</div>
					<div class="col-md-3 mt-3">
						<div id="verticalContainer" class="scrollable-container">
							<div class="select-all">
								<input type="checkbox" id="selectAllVertical" class="select-all-checkbox">
								<label for="selectAllVertical"><strong>Vertical</strong></label>
							</div>
						</div>

					</div>


				</div>



				<div class="row">
					<div class="col-md-12 mt-3">
						<div class="scrollable-table">
							<table id="dynamicTable">
								<thead>
									<tr>
										<th>Name</th>
										<th>Deleted</th>
										<th>View</th>
										<th>Update</th>
										<th>Save</th>
									</tr>
								</thead>
								<tbody></tbody>
							</table>
						</div>
					</div>


				</div>


			</div>

			<div class="modal-footer btn-heading-title">
				<button type="button" class="btn btn-primary" id="btnAddPrivilegeMaster" style="background-color:#2395c6; color:white;">Save</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>

	async function GetPageData(){
				var companyId = $('#companyDropdown').val();
			if (!companyId) {
				round_error_noti("Please select company");
				return;
			}

				var pagePanelId = $('#ddlPagePanel').val();
				if (!pagePanelId) {
					round_error_noti("Please select page panel");
					return;
				}

			var payloadData = {
				pagePanelId: pagePanelId,
				companyId: companyId
			};

			$.ajax({
				url: '@baseUrl/PageMasterAPI/GetPageHierarchyWithPrivileges', // Replace with actual API URL
				method: 'POST',
				contentType: 'application/json',
				data: JSON.stringify(payloadData),
				success: function(response) {
					if (response.isSuccess) {
						//console.log(response.data);
				   BindPageData(response.data);
					} else {
						round_error_noti(response.responseMessage);
					}
				},
				error: function(xhr, status, error) {
					console.error("API Error: ", error);
				}
			});

	}



	async function bindPagePanel(){

	   $.ajax({
			url: '@baseUrl/PagePanelAPI/GetAllPagePanels',
			method: 'GET',
			success: function(data) {
				if(data.isSuccess){
					var dropdowns = $('#ddlPagePanel');
					dropdowns.empty();
					$.each(data.data, function(index, panel) {
							dropdowns.append($('<option >', {
							value: panel.pagePanelId,
							text: panel.pagePanelName
						}));
					});


				}
			},
			error: function(error) {
				console.error('Error fetching page penel data:', error);
			}
		});

	}


	$("#addPrivilegeMaster").click( async () => {

		   $("#addPrivilegeMasterModal").modal('show');

	})

	function bindBranch() {
		$.ajax({
			url: '@baseUrl/BranchAPI/GetAllBranch',
			method: 'GET',
			success: function(data) {
				if (data.isSuccess) {
					const branchesContainer = $('#branchesContainer');
					branchesContainer.find('.branch-item').remove(); // Clear existing branch items

					// Iterate over each branch in the data
					data.data.forEach(branch => {
						// Create a div for each branch
						const branchDiv = $('<div>', {
							class: 'branch-item',
							'data-branch-id': branch.branchId
						});

						// Create a checkbox for each branch
						const checkbox = $('<input>', {
							type: 'checkbox',
							id: `branch-${branch.branchId}`,
							class: 'branch-checkbox'
						});

						// Create a label for the checkbox
						const label = $('<label>', {
							for: `branch-${branch.branchId}`,
							text: branch.branchName
						});

						// Append the checkbox and label to the branch div
						branchDiv.append(checkbox, label);

						// Append the branch div to the container
						branchesContainer.append(branchDiv);
					});

					// Add event listener for the "Select All" checkbox
					$('#selectAllBranch').on('change', function() {
						const isChecked = $(this).is(':checked');
						$('.branch-checkbox').prop('checked', isChecked);
					});
				}
			},
			error: function(error) {
				console.error('Error fetching branch data:', error);
			}
		});
	}



	function bindDepartment() {
		$.ajax({
			url: '@baseUrl/DepartmentAPI/GetAllDepartment',
			method: 'GET',
			success: function(data) {
				console.log('Data received:', data); // Log the data to the console

				if (data.isSuccess && data.data) {
					const departmentsContainer = $('#departmentContainer'); // Ensure this ID matches your HTML

					// Check if the container exists
					if (!departmentsContainer.length) {
						console.error('Departments container not found');
						return;
					}

					departmentsContainer.find('.department-item').remove(); // Clear existing department items

					// Iterate over each department in the data
					data.data.forEach(department => {
						// Create a div for each department
						const departmentDiv = $('<div>', {
							class: 'department-item',
							'data-department-id': department.departmentId
						});

						// Create a checkbox for each department
						const checkbox = $('<input>', {
							type: 'checkbox',
							id: `department-${department.departmentId}`,
							class: 'department-checkbox'
						});

						// Create a label for the checkbox
						const label = $('<label>', {
							for: `department-${department.departmentId}`,
							text: department.departmentName
						});

						// Append the checkbox and label to the department div
						departmentDiv.append(checkbox, label);

						// Append the department div to the container
						departmentsContainer.append(departmentDiv);
					});

					// Add event listener for the "Select All" checkbox
					$('#selectAllDepartment').on('change', function() {
						const isChecked = $(this).is(':checked');
						$('.department-checkbox').prop('checked', isChecked);
					});
				} else {
					console.error('Data fetch was not successful or data is missing');
				}
			},
			error: function(error) {
				console.error('Error fetching department data:', error);
			}
		});
	}

	// Call the function to bind departments
	$(document).ready( async function() {

		// 2️⃣ Then load panel, branch, department in parallel
		await Promise.all([
		LoadCompanyDetails(),
		  bindPagePanel(),
		  bindBranch(),
		  bindDepartment()
		]);

		// 3️⃣ Finally, call GetPageData
		await GetPageData();
		$('#companyDropdown').change(function() {
				GetPageData();
		});

		// Bind change event for page panel dropdown
		$('#ddlPagePanel').change(function() {
				GetPageData();
		});
	});




</script>

<script>
	function BindPageData(PageData){
			 const tbody = document.querySelector('#dynamicTable tbody');
					 tbody.innerHTML = '';

			 function renderRow(item, level, hasChildren) {
			   const tr = document.createElement('tr');
			   tr.classList.add(`level-${level}`);
			   tr.dataset.pageMasterId = item.pageMasterId || '';
			   tr.dataset.privilegeDetailsId = item.privilegeDetailsId || 0;

			   const nameTd = document.createElement('td');
			   const toggle = hasChildren ? `<span class="toggle-icon">▶</span>` : '';
			   nameTd.innerHTML = `${toggle}<input type="checkbox" class="node-check" /> <label>${item.pageName}</label>`;
			   tr.appendChild(nameTd);

			   const isTopParent = level === 1;
			   const hasNoChildren = !hasChildren;

			   if (isTopParent) {
				 if (hasNoChildren) {
				   ["delete", "view", "update", "save"].forEach(cls => {
					 const td = document.createElement('td');
					 td.innerHTML = `<input type="checkbox" class="${cls} action-hidden" />`;
					 tr.appendChild(td);
				   });
				 } else {
				   for (let i = 0; i < 4; i++) tr.appendChild(document.createElement('td'));
				 }
			   } else {
				 ["delete", "view", "update", "save"].forEach(cls => {
				   const td = document.createElement('td');
				   td.innerHTML = `<input type="checkbox" class="${cls}" />`;
				   tr.appendChild(td);
				 });
			   }

			   if (level > 1) tr.style.display = "none";

			   tbody.appendChild(tr);
			   return tr;
			 }

			 function renderData(list, level = 1) {
			   list.forEach(item => {
				 const hasChildren = (item.subPages && item.subPages.length > 0) || (item.subSubPages && item.subSubPages.length > 0);
				 renderRow(item, level, hasChildren);
				 const children = item.subPages || item.subSubPages || [];
				 if (hasChildren) renderData(children, level + 1);
			   });
			 }

			 PageData.forEach(panel => {
			   const tr = document.createElement('tr');
			   tr.classList.add('panel-row');
			   const td = document.createElement('td');
			   td.colSpan = 5;
			   td.innerHTML = `<strong>${panel.pagePanelName}</strong>`;
			   tr.appendChild(td);
			   tbody.appendChild(tr);
			   renderData(panel.pages, 1);
			 });

			 document.addEventListener('click', e => {
			   if (e.target.classList.contains('toggle-icon')) {
				 const parentRow = e.target.closest('tr');
				 const level = parseInt([...parentRow.classList].find(c => c.startsWith('level-')).split('-')[1]);
				 let expanded = false;
				 let row = parentRow.nextElementSibling;
				 while (row && !row.classList.contains(`level-${level}`)) {
				   const nextLevel = parseInt([...row.classList].find(c => c.startsWith('level-')).split('-')[1]);
				   if (nextLevel <= level) break;
				   if (nextLevel === level + 1) {
					 row.style.display = row.style.display === 'none' ? '' : 'none';
					 expanded = row.style.display === '';
				   }
				   row = row.nextElementSibling;
				 }
				 e.target.textContent = expanded ? '▼' : '▶';
			   }
			 });

			 document.addEventListener('change', e => {
			   if (e.target.classList.contains('node-check')) {
				 const row = e.target.closest('tr');
				 const checked = e.target.checked;
				 row.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = checked);
				 const level = parseInt([...row.classList].find(c => c.startsWith('level-')).split('-')[1]);
				 let nextRow = row.nextElementSibling;
				 while (nextRow) {
				   const nextLevel = parseInt([...nextRow.classList].find(c => c.startsWith('level-')).split('-')[1]);
				   if (nextLevel <= level) break;
				   nextRow.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = checked);
				   nextRow = nextRow.nextElementSibling;
				 }
			   }
			 });

	 }
</script>
<script>
	   $("#btnAddPrivilegeMaster").click(  () => {
			  savePrivilageData();

	  })
	  function savePrivilageData() {

			var branches = getSelectedBranches();
			  var departments = getSelectedDepartments();
				  var subpageActions = collectPageData();
			   var pageName = $('#txtPrivilegeName').val();
			   var pagePanel = $('#ddlPagePanel').val();

			  var payload = {
				  PageName: pageName,
				  PagePanel: pagePanel,
				  Branches: branches,
				  departments: departments,
				  PageData: collectPageData(),
			  };
				console.log("payload",payload);
		  // $.ajax({
			 //  url: '@baseUrl/YourAPIEndpoint/SaveData', // Replace with your actual API URL
			 //  method: 'POST',
			 //  contentType: 'application/json',
			 //  data: JSON.stringify(payload),
			 //  success: function(response) {
				//   if (response.isSuccess) {
				// 	  alert('Data saved successfully!');
				//   } else {
				// 	  alert('Error saving data: ' + response.responseMessage);
				//   }
			 //  },
			 //  error: function(xhr, status, error) {
				//   console.error("API Error: ", error);
				//   alert('Error saving data.');
			 //  }
		  // });
	  }

	function collectPageData() {
	  const rows = document.querySelectorAll('#dynamicTable tbody tr');
	  const result = [];

	  rows.forEach(row => {
		if (row.querySelector('.node-check')) {
		  result.push({
			pageMasterId: parseInt(row.dataset.pageMasterId || 0),
			privilegeDetailsId: parseInt(row.dataset.privilegeDetailsId || 0),
			is_Delete: row.querySelector('.delete')?.checked || false,
			is_Edit: row.querySelector('.update')?.checked || false,
			is_View: row.querySelector('.view')?.checked || false,
			is_Save: row.querySelector('.save')?.checked || false
		  });
		}
	  });

	  return result;
	}

		  function getSelectedBranches() {
		  var selectedBranches = [];
		  $('.branch-checkbox:checked').each(function() {
			  selectedBranches.push($(this).closest('.branch-item').data('branch-id'));
		  });
		  return selectedBranches.join('#');
	  }

	  function getSelectedDepartments() {
		  var selectedDepartments = [];
		  $('.department-checkbox:checked').each(function() {
			  selectedDepartments.push($(this).closest('.department-item').data('department-id'));
		  });
		  return selectedDepartments.join('#');
	  }



</script>


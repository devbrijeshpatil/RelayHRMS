@{
    ViewData["Title"] = "ManageGrade";
    Layout = "~/Views/Shared/_mainLayout.cshtml";
}





<div class="card">
    <div class="card-header bg-transparent ml-0 py-0">
        <div class="row">
            <div class="col-6">
                <h6 class="pt-2 mb-0">
                    Manage Designation
                </h6>
            </div>

            <div class="col-6 d-flex justify-content-end align-items-center">
                <div class="font-22 pl-2" style="color:#32393f; cursor:pointer;">
                    <i class="fadeIn animated bx bx-refresh" id="getData" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Refresh Data"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-12 btn-heading-title">
                <div class="input-group mb-2">
                    <button id="addDesignation"
                            type="button"
                            class="btn mr-1 rounded-1"
                            style="background-color:#2395c6; color:white;">
                        Add Designation
                    </button>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="form-group">
                    <div class="rowCount" id="rowCount1"></div>
                    <div id="gridContainer">
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="addGradeModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title btn-heading-title" id="exampleModalLabel">Create Grade</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body modal-body-font">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Grade  Name</label>
                            <span style="color:red">*</span>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Grade  Name"
                                   id="txtGradeName" />
                            <span id="spnGradeName" style="color:red; display:none;">Please Enter Grade Name.</span>

                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Description</label>
                            <span style="color:red">*</span>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Description"
                                   id="txtDescription" />

                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Basic Salary</label>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Basic Salary"
                                   id="txtBasicSalary" />
                        </div>
                    </div>
                </div>


                <div class="row">

                    <div class="col-md-4">
                        <div class="form-group mt-3">
                            <label>Govt. Minimum Basics</label>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Govt. Minimum Basics"
                                   id="txtGovtMinimumBasics" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group mt-3">
                            <label>Sorting No</label>
                            <input type="number"
                                   class="form-control"
                                   placeholder="Sorting No"
                                   id="txtSortingNo" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group mt-3">
                            <label>Notice Period Days</label>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Notice Period Days"
                                   id="txtNoticePeriodDays" />
                        </div>
                    </div>

                </div>


                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group mt-3">
                            <label>Notice Period Working Days</label>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Notice Period Working Days"
                                   id="txtNoticePeriodWorkingDays" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group mt-3">
                            <label>Salary Range</label>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Salary Range"
                                   id="txtSalaryRange" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group mt-3">
                            <label>Eligibility Amount (Optional Allowance)</label>
                            <input type="text"
                                   class="form-control"
                                   placeholder="Eligibility Amount"
                                   id="txtEligibilityAmount" />
                        </div>
                    </div>
                </div>

                <div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label>Wages Type</label>
                            <select id="drpWagesType" class="form-control">
                                    <option selected="selected" value="0">--Select--</option>
                                    <option value="1">Monthly</option>
                                    <option value="2">Weekly</option>
                                    <option value="3">Daily</option>
                            </select>
                          
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group mt-3">
                            <label>OverTime Applicable</label>
                            <input type="checkbox"
                                   class="form-control-input"
                                   placeholder=""
                                   id="txtOverTimeApplicable" />
                        </div>

                    </div>
                    <div class="col-md-3">
                        <div class="form-group mt-3">
                            <label>Active</label>
                            <input type="checkbox"
                                   class="form-control-input"
                                   placeholder=""
                                   id="txtActive" />
                        </div>

                    </div>

                </div>

            </div>
            <div class="modal-footer btn-heading-title">
                <button type="button" class="btn btn-primary" id="btnCreateGrade" style="background-color:#2395c6; color:white;">Create</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script>

    $(() => {
        loadDataTable();
    });


    function loadDataTable() {

        $.ajax({
            type: "GET",
            url: 'https://localhost:7234/api/GradeAPI/GetAllGrade',
            success: function (data) {
                console.log(data)
                $("#gridContainer").dxDataGrid({
                    dataSource: data.data,
                    columns: [

                        {
                            dataField: '',
                            caption: '',
                            alignment: 'center',
                            dataType: 'string',
                            format: '',
                            type: 'buttons',
                            width: '50px',
                            cellTemplate: function (container, options) {

                                var buttonElement = $('<div class="d-flex order-actions">' +
                                    '<a href="javascript:;" class="edit-action" title="Grade">' +
                                    '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
                                    '<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
                                    '</svg>' +
                                    '</a>' +
                                    '</div>')
                                    .on('dxclick', function () {
                                        updateGrade(options.data);
                                    }).appendTo(container);

                                var svgElement = buttonElement.find('svg');  // Accessing the svg element directly

                                svgElement.attr('title', 'Update Grade');
                            }
                        },

                        {
                            dataField: '',
                            caption: '',
                            alignment: 'center',
                            dataType: 'string',
                            format: '',
                            type: 'buttons',
                            width: '50px',
                            cellTemplate: function (container, options) {

                                var buttonElement = $('<div class="d-flex order-actions">' +
                                    '<a href="javascript:;" class="delete-action" title="Grade">' +
                                    '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
                                    '<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
                                    '</svg>' +
                                    '</a>' +
                                    '</div>')
                                    .on('dxclick', function () {
                                        deleteGrade(options.data);
                                    }).appendTo(container);

                                var svgElement = buttonElement.find('svg');  // Accessing the svg element directly

                                svgElement.attr('title', 'Delete Grade');
                            }
                        },


                        { dataField: 'gradeName', caption: 'Grade', alignment: 'center', dataType: 'string', format: '' },
                        { dataField: 'description', caption: 'Description', alignment: 'center', dataType: 'string', format: '' },
                        { dataField: 'eligibilityAmount', caption: 'Eligibility Amount (Optional Allowance)', alignment: 'center', dataType: 'string', format: '' },
                        { dataField: 'sorting_No', caption: 'Sorting No', alignment: 'center', dataType: 'string', format: '' },
                        { dataField: 'overTimeApplicable', caption: 'OP Application', alignment: 'center', dataType: 'string', format: '' },
                       
                        {
                            dataField: 'isEnabled',
                            caption: 'Status',
                            alignment: 'center',
                            dataType: 'string',
                            calculateCellValue: function (data) {
                                return data.isEnabled ? "Active" : "Inactive"; // Based on isEnabled field value
                            }
                        }

                    ],
                    columnsAutoWidth: true,
                    wordWrapEnabled: false,
                    rowAlternationEnabled: false,
                    showBorders: true,
                    grouping: { autoExpandAll: true },
                    paging: { pageSize: 10 },
                    pager: { showPageSizeSelector: true, allowedPageSizes: [10, 25, 50, 100] },
                    headerFilter: { visible: true },
                    filterRow: { visible: true, applyFilter: "auto" },
                    allowColumnResizing: true,
                    groupPanel: { visible: true },
                    searchPanel: { visible: true, width: 240, placeholder: "Search..." },
                    customizeColumns: function (columns) {
                        columns.forEach(function (column) {
                            if (column.dataField === 'enrolled') {
                                // Add editor options for date
                                column.editorOptions = {
                                    type: 'date',
                                    onKeyDown: function (e) {
                                        var key = e.event.key;
                                        // Allow only numbers (0-9), backspace (8), delete (46), and common date separators like '-' and '/'
                                        if (!/^[0-9\/\-]$/.test(key) && e.event.keyCode !== 8 && e.event.keyCode !== 46) {
                                            e.event.preventDefault();  // Prevent the default behavior for invalid keys
                                        }
                                    },
                                    onInput: function (e) {
                                        // Automatically format or handle input if necessary
                                        let value = e.component.option('value');
                                        // Add additional formatting logic if needed
                                    }
                                };
                            }
                        });
                    },
                    allowColumnReordering: true,
                    columnFixing: { enabled: false },
                    onExporting: function (e) {
                        e.component.beginUpdate();
                        e.component.columnOption("Button", "visible", false);
                        e.component.columnOption("Add", "visible", false);
                    },
                    onExported: function (e) {
                        e.component.columnOption("Button", "visible", true);
                        e.component.columnOption("Add", "visible", true);
                        e.component.endUpdate();
                    },
                    onCellPrepared: function (e) {
                        if (e.rowType === "header") {
                            e.cellElement.css("text-align", "center");
                            e.cellElement.css("font-weight", "bold");
                        }
                        if (e.rowType === "group") {
                            e.cellElement.css("text-align", "center");
                        }
                    },
                    onContentReady(e) {
                        jQuery('.rowCount').html('Total Records: ' + jQuery("#gridContainer").dxDataGrid('instance').totalCount());
                    }
                }).dxDataGrid('instance');
            }
        });
    }


    $("#addDesignation").click(() => {
        $("#addGradeModel").modal('show');
        $("#btnCreateGrade").text("Save");

        $("#spnGradeName").hide();
        

        $("#txtDesignationName").val("");
        $("#txtDesignationCode").val("");
        $("#txtSortingNo").val("0");
        $("#txtAllow_ReimEligibilityAmount").val("");
        $("#txtManagerialPost").prop("checked", false);  // Uncheck the checkbox
        $("#txtIsMain").prop("checked", false);  // Uncheck the checkbox
        $("#txtActive").prop("checked", false);  // Uncheck the checkbox
        $("#txtAbscondingReminderEmail").prop("checked", false);  // Uncheck the checkbox

    });


    $("#btnCreateGrade").click(() => {

        var txtGradeName = $("#txtGradeName").val();
        var txtDescription = $("#txtDescription").val();
        var txtBasicSalary = $("#txtBasicSalary").val();
        var txtGovtMinimumBasics = $("#txtGovtMinimumBasics").val();
        var txtSortingNo = $("#txtSortingNo").val() || 0;
        var txtNoticePeriodDays = $("#txtNoticePeriodDays").val();
        var txtNoticePeriodWorkingDays = $("#txtNoticePeriodWorkingDays").val();
        var txtSalaryRange = $("#txtSalaryRange").val();
        var txtEligibilityAmount = $("#txtEligibilityAmount").val();
        var drpWagesType = $("#drpWagesType option:selected").text();
        var txtOverTimeApplicable = $("#txtOverTimeApplicable").prop("checked");
        var txtActive = $("#txtActive").prop("checked");


        // Flag to track validation status
        var isValid = true;

        // Validate txtBranchName
        if (!txtGradeName) {
            $("#spnGradeName").show();
            isValid = false;
        } else {
            $("#spnGradeName").hide();
        }

        if (gradeIdUpdate == 0) {
            var Grade = {
                GradeId: gradeIdUpdate, GradeName: txtGradeName, Description: txtDescription, BasicSalary: txtBasicSalary,
                Govt_MinimumBasics: txtGovtMinimumBasics, NoticePeriodDays: txtNoticePeriodDays, NoticePeriodWorkingDays: txtNoticePeriodWorkingDays, 
                SalaryRange: txtSalaryRange, IsEnabled: txtActive,
                EligibilityAmount: txtEligibilityAmount, WagesType: drpWagesType, OverTimeApplicable: txtOverTimeApplicable, Sorting_No: txtSortingNo
            }

        } else {
            var Grade = {
                GradeId: gradeIdUpdate, GradeName: txtGradeName, Description: txtDescription, BasicSalary: txtBasicSalary,
                Govt_MinimumBasics: txtGovtMinimumBasics, NoticePeriodDays: txtNoticePeriodDays, NoticePeriodWorkingDays: txtNoticePeriodWorkingDays,
                SalaryRange: txtSalaryRange, IsEnabled: txtActive,
                EligibilityAmount: txtEligibilityAmount, WagesType: drpWagesType, OverTimeApplicable: txtOverTimeApplicable, Sorting_No: txtSortingNo
            }

        }

        if (isValid) {
            $.ajax({
                url: 'https://localhost:7234/api/GradeAPI/CreateGrade',
                type: "POST",
                data: JSON.stringify(Grade),
                dataType: "json",
                contentType: 'application/json',
                success: function (data) {
                    loadDataTable();
                    $("#addGradeModel").modal('hide');

                    alert("Designaction Add Successfully!")


                    $("#txtGradeName").val();
                    $("#txtDescription").val();
                    $("#txtBasicSalary").val();
                    $("#txtGovtMinimumBasics").val();
                    $("#txtSortingNo").val() || 0;
                    $("#txtNoticePeriodDays").val();
                    $("#txtNoticePeriodWorkingDays").val();
                    $("#txtSalaryRange").val();
                    $("#txtEligibilityAmount").val();
                    $("#drpWagesType option:selected").text("--selete--");
                    $("#txtOverTimeApplicable").prop("checked", false);
                    $("#txtActive").prop("checked", false);

                    $("#txtDesignationName").val();
                    $("#txtDesignationCode").val();
                    $("#txtAllow_ReimEligibilityAmount").val();
                    $("#txtSortingNo").val() || 0;
                    $("#txtActive").prop("checked", false);  // Uncheck the checkbox;
                    $("#txtManagerialPost").prop("checked", false);  // Uncheck the checkbox;
                    $("#txtIsMain").prop("checked", false);  // Uncheck the checkbox
                    $("#txtAbscondingReminderEmail").prop("checked", false);  // Uncheck the checkbox

                    designationIdUpdate = 0;
                },
                error: function (xhr) {
                }
            });

        }


    });

    var gradeIdUpdate = 0;
    function updateDesignaction(data) {

        $("#btnCreateGrade").text("Update");

        gradeIdUpdate = data.designationId;


        $("#txtDesignationName").val(data.designationName);
        $("#txtDesignationCode").val(data.designationCode);
        $("#txtSortingNo").val(data.sortingNo);
        $("#txtAllow_ReimEligibilityAmount").val(data.allow_ReimEligibilityAmount);

        if (data.managerialPost) {
            $("#txtManagerialPost").prop("checked", true);  // Check the checkbox if data.ojtApplicable is true
        } else {
            $("#txtManagerialPost").prop("checked", false);  // Uncheck the checkbox if data.ojtApplicable is false or undefined
        }
        if (data.isEnabled) {
            $("#txtActive").prop("checked", true);  // Check the checkbox if data.ojtApplicable is true
        } else {
            $("#txtActive").prop("checked", false);  // Uncheck the checkbox if data.ojtApplicable is false or undefined
        }
        if (data.isMain) {
            $("#txtIsMain").prop("checked", true);  // Check the checkbox if data.ojtApplicable is true
        } else {
            $("#txtIsMain").prop("checked", false);  // Uncheck the checkbox if data.ojtApplicable is false or undefined
        }
        if (data.abscondingReminderEmail) {
            $("#txtAbscondingReminderEmail").prop("checked", true);  // Check the checkbox if data.ojtApplicable is true
        } else {
            $("#txtAbscondingReminderEmail").prop("checked", false);  // Uncheck the checkbox if data.ojtApplicable is false or undefined
        }

        // Show the modal
        $("#addDesignationModel").modal('show');
    }



    function deleteDesignaction(data) {

        // Show confirmation dialog
        var isConfirmed = confirm("Are you sure you want to delete this department?");

        if (isConfirmed) {
            var deleteRecord = {
                Id: data.designationId,
                DeletedBy: ""  // You may want to pass the current user's ID or name here.
            };

            $.ajax({
                url: 'https://localhost:7234/api/DesignationAPI/Delete',
                type: "DELETE",
                data: JSON.stringify(deleteRecord),
                dataType: "json",
                contentType: 'application/json',
                success: function (response) {
                    // Handle success: reload the table to reflect the changes
                    loadDataTable();

                    // Optionally, show a success message or notification to the user
                    alert("Department deleted successfully.");
                },
                error: function (xhr, status, error) {
                    // Handle error: provide feedback to the user
                    alert("An error occurred while deleting the branch. Please try again.");
                }
            });
        } else {
            // If the user cancels the confirmation, do nothing
            console.log("Department deletion was cancelled.");
        }
    }


</script>
